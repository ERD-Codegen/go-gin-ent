// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ArticlesColumns holds the columns for the "articles" table.
	ArticlesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "author_id", Type: field.TypeUUID},
		{Name: "slug", Type: field.TypeString, Unique: true, Size: 255},
		{Name: "title", Type: field.TypeString, Size: 255},
		{Name: "description", Type: field.TypeString, Size: 255},
		{Name: "body", Type: field.TypeString, Size: 4096},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "article_comments", Type: field.TypeUUID, Nullable: true},
	}
	// ArticlesTable holds the schema information for the "articles" table.
	ArticlesTable = &schema.Table{
		Name:       "articles",
		Columns:    ArticlesColumns,
		PrimaryKey: []*schema.Column{ArticlesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "articles_comments_comments",
				Columns:    []*schema.Column{ArticlesColumns[8]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "article_slug",
				Unique:  true,
				Columns: []*schema.Column{ArticlesColumns[2]},
			},
		},
	}
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "article_id", Type: field.TypeUUID},
		{Name: "author_id", Type: field.TypeUUID},
		{Name: "body", Type: field.TypeString, Size: 4096},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
	}
	// TagsColumns holds the columns for the "tags" table.
	TagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "description", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
	}
	// TagsTable holds the schema information for the "tags" table.
	TagsTable = &schema.Table{
		Name:       "tags",
		Columns:    TagsColumns,
		PrimaryKey: []*schema.Column{TagsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "image", Type: field.TypeString, Default: "https://api.realworld.io/images/smiley-cyrus.jpeg"},
		{Name: "bio", Type: field.TypeString, Default: ""},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "author_id", Type: field.TypeUUID, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_articles_articles",
				Columns:    []*schema.Column{UsersColumns[8]},
				RefColumns: []*schema.Column{ArticlesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "users_comments_comments",
				Columns:    []*schema.Column{UsersColumns[8]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ArticleTagsColumns holds the columns for the "article_tags" table.
	ArticleTagsColumns = []*schema.Column{
		{Name: "article_id", Type: field.TypeUUID},
		{Name: "tag_id", Type: field.TypeUUID},
	}
	// ArticleTagsTable holds the schema information for the "article_tags" table.
	ArticleTagsTable = &schema.Table{
		Name:       "article_tags",
		Columns:    ArticleTagsColumns,
		PrimaryKey: []*schema.Column{ArticleTagsColumns[0], ArticleTagsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "article_tags_article_id",
				Columns:    []*schema.Column{ArticleTagsColumns[0]},
				RefColumns: []*schema.Column{ArticlesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "article_tags_tag_id",
				Columns:    []*schema.Column{ArticleTagsColumns[1]},
				RefColumns: []*schema.Column{TagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserFavoritesColumns holds the columns for the "user_favorites" table.
	UserFavoritesColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "article_id", Type: field.TypeUUID},
	}
	// UserFavoritesTable holds the schema information for the "user_favorites" table.
	UserFavoritesTable = &schema.Table{
		Name:       "user_favorites",
		Columns:    UserFavoritesColumns,
		PrimaryKey: []*schema.Column{UserFavoritesColumns[0], UserFavoritesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_favorites_user_id",
				Columns:    []*schema.Column{UserFavoritesColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_favorites_article_id",
				Columns:    []*schema.Column{UserFavoritesColumns[1]},
				RefColumns: []*schema.Column{ArticlesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserFollowsColumns holds the columns for the "user_follows" table.
	UserFollowsColumns = []*schema.Column{
		{Name: "follower_id", Type: field.TypeUUID},
		{Name: "followee_id", Type: field.TypeUUID},
	}
	// UserFollowsTable holds the schema information for the "user_follows" table.
	UserFollowsTable = &schema.Table{
		Name:       "user_follows",
		Columns:    UserFollowsColumns,
		PrimaryKey: []*schema.Column{UserFollowsColumns[0], UserFollowsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_follows_follower_id",
				Columns:    []*schema.Column{UserFollowsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_follows_followee_id",
				Columns:    []*schema.Column{UserFollowsColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ArticlesTable,
		CommentsTable,
		TagsTable,
		UsersTable,
		ArticleTagsTable,
		UserFavoritesTable,
		UserFollowsTable,
	}
)

func init() {
	ArticlesTable.ForeignKeys[0].RefTable = CommentsTable
	UsersTable.ForeignKeys[0].RefTable = ArticlesTable
	UsersTable.ForeignKeys[1].RefTable = CommentsTable
	ArticleTagsTable.ForeignKeys[0].RefTable = ArticlesTable
	ArticleTagsTable.ForeignKeys[1].RefTable = TagsTable
	UserFavoritesTable.ForeignKeys[0].RefTable = UsersTable
	UserFavoritesTable.ForeignKeys[1].RefTable = ArticlesTable
	UserFollowsTable.ForeignKeys[0].RefTable = UsersTable
	UserFollowsTable.ForeignKeys[1].RefTable = UsersTable
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/k0kishima/golang-realworld-example-app/ent/article"
	"github.com/k0kishima/golang-realworld-example-app/ent/articletag"
	"github.com/k0kishima/golang-realworld-example-app/ent/tag"
)

// ArticleTag is the model entity for the ArticleTag schema.
type ArticleTag struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ArticleID holds the value of the "article_id" field.
	ArticleID uuid.UUID `json:"article_id,omitempty"`
	// TagID holds the value of the "tag_id" field.
	TagID uuid.UUID `json:"tag_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArticleTagQuery when eager-loading is set.
	Edges        ArticleTagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ArticleTagEdges holds the relations/edges for other nodes in the graph.
type ArticleTagEdges struct {
	// Article holds the value of the article edge.
	Article *Article `json:"article,omitempty"`
	// Tag holds the value of the tag edge.
	Tag *Tag `json:"tag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ArticleOrErr returns the Article value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArticleTagEdges) ArticleOrErr() (*Article, error) {
	if e.Article != nil {
		return e.Article, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: article.Label}
	}
	return nil, &NotLoadedError{edge: "article"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArticleTagEdges) TagOrErr() (*Tag, error) {
	if e.Tag != nil {
		return e.Tag, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: tag.Label}
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ArticleTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case articletag.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case articletag.FieldID, articletag.FieldArticleID, articletag.FieldTagID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ArticleTag fields.
func (at *ArticleTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case articletag.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				at.ID = *value
			}
		case articletag.FieldArticleID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field article_id", values[i])
			} else if value != nil {
				at.ArticleID = *value
			}
		case articletag.FieldTagID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tag_id", values[i])
			} else if value != nil {
				at.TagID = *value
			}
		case articletag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				at.CreatedAt = value.Time
			}
		default:
			at.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ArticleTag.
// This includes values selected through modifiers, order, etc.
func (at *ArticleTag) Value(name string) (ent.Value, error) {
	return at.selectValues.Get(name)
}

// QueryArticle queries the "article" edge of the ArticleTag entity.
func (at *ArticleTag) QueryArticle() *ArticleQuery {
	return NewArticleTagClient(at.config).QueryArticle(at)
}

// QueryTag queries the "tag" edge of the ArticleTag entity.
func (at *ArticleTag) QueryTag() *TagQuery {
	return NewArticleTagClient(at.config).QueryTag(at)
}

// Update returns a builder for updating this ArticleTag.
// Note that you need to call ArticleTag.Unwrap() before calling this method if this ArticleTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *ArticleTag) Update() *ArticleTagUpdateOne {
	return NewArticleTagClient(at.config).UpdateOne(at)
}

// Unwrap unwraps the ArticleTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *ArticleTag) Unwrap() *ArticleTag {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: ArticleTag is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *ArticleTag) String() string {
	var builder strings.Builder
	builder.WriteString("ArticleTag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("article_id=")
	builder.WriteString(fmt.Sprintf("%v", at.ArticleID))
	builder.WriteString(", ")
	builder.WriteString("tag_id=")
	builder.WriteString(fmt.Sprintf("%v", at.TagID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(at.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ArticleTags is a parsable slice of ArticleTag.
type ArticleTags []*ArticleTag

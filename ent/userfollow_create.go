// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/k0kishima/golang-realworld-example-app/ent/userfollow"
)

// UserFollowCreate is the builder for creating a UserFollow entity.
type UserFollowCreate struct {
	config
	mutation *UserFollowMutation
	hooks    []Hook
}

// SetFollowerID sets the "follower_id" field.
func (ufc *UserFollowCreate) SetFollowerID(u uuid.UUID) *UserFollowCreate {
	ufc.mutation.SetFollowerID(u)
	return ufc
}

// SetFolloweeID sets the "followee_id" field.
func (ufc *UserFollowCreate) SetFolloweeID(u uuid.UUID) *UserFollowCreate {
	ufc.mutation.SetFolloweeID(u)
	return ufc
}

// SetCreatedAt sets the "created_at" field.
func (ufc *UserFollowCreate) SetCreatedAt(t time.Time) *UserFollowCreate {
	ufc.mutation.SetCreatedAt(t)
	return ufc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ufc *UserFollowCreate) SetNillableCreatedAt(t *time.Time) *UserFollowCreate {
	if t != nil {
		ufc.SetCreatedAt(*t)
	}
	return ufc
}

// SetID sets the "id" field.
func (ufc *UserFollowCreate) SetID(u uuid.UUID) *UserFollowCreate {
	ufc.mutation.SetID(u)
	return ufc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ufc *UserFollowCreate) SetNillableID(u *uuid.UUID) *UserFollowCreate {
	if u != nil {
		ufc.SetID(*u)
	}
	return ufc
}

// Mutation returns the UserFollowMutation object of the builder.
func (ufc *UserFollowCreate) Mutation() *UserFollowMutation {
	return ufc.mutation
}

// Save creates the UserFollow in the database.
func (ufc *UserFollowCreate) Save(ctx context.Context) (*UserFollow, error) {
	ufc.defaults()
	return withHooks(ctx, ufc.sqlSave, ufc.mutation, ufc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ufc *UserFollowCreate) SaveX(ctx context.Context) *UserFollow {
	v, err := ufc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufc *UserFollowCreate) Exec(ctx context.Context) error {
	_, err := ufc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufc *UserFollowCreate) ExecX(ctx context.Context) {
	if err := ufc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufc *UserFollowCreate) defaults() {
	if _, ok := ufc.mutation.CreatedAt(); !ok {
		v := userfollow.DefaultCreatedAt()
		ufc.mutation.SetCreatedAt(v)
	}
	if _, ok := ufc.mutation.ID(); !ok {
		v := userfollow.DefaultID()
		ufc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufc *UserFollowCreate) check() error {
	if _, ok := ufc.mutation.FollowerID(); !ok {
		return &ValidationError{Name: "follower_id", err: errors.New(`ent: missing required field "UserFollow.follower_id"`)}
	}
	if _, ok := ufc.mutation.FolloweeID(); !ok {
		return &ValidationError{Name: "followee_id", err: errors.New(`ent: missing required field "UserFollow.followee_id"`)}
	}
	if _, ok := ufc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserFollow.created_at"`)}
	}
	return nil
}

func (ufc *UserFollowCreate) sqlSave(ctx context.Context) (*UserFollow, error) {
	if err := ufc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ufc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ufc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ufc.mutation.id = &_node.ID
	ufc.mutation.done = true
	return _node, nil
}

func (ufc *UserFollowCreate) createSpec() (*UserFollow, *sqlgraph.CreateSpec) {
	var (
		_node = &UserFollow{config: ufc.config}
		_spec = sqlgraph.NewCreateSpec(userfollow.Table, sqlgraph.NewFieldSpec(userfollow.FieldID, field.TypeUUID))
	)
	if id, ok := ufc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ufc.mutation.FollowerID(); ok {
		_spec.SetField(userfollow.FieldFollowerID, field.TypeUUID, value)
		_node.FollowerID = value
	}
	if value, ok := ufc.mutation.FolloweeID(); ok {
		_spec.SetField(userfollow.FieldFolloweeID, field.TypeUUID, value)
		_node.FolloweeID = value
	}
	if value, ok := ufc.mutation.CreatedAt(); ok {
		_spec.SetField(userfollow.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// UserFollowCreateBulk is the builder for creating many UserFollow entities in bulk.
type UserFollowCreateBulk struct {
	config
	err      error
	builders []*UserFollowCreate
}

// Save creates the UserFollow entities in the database.
func (ufcb *UserFollowCreateBulk) Save(ctx context.Context) ([]*UserFollow, error) {
	if ufcb.err != nil {
		return nil, ufcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ufcb.builders))
	nodes := make([]*UserFollow, len(ufcb.builders))
	mutators := make([]Mutator, len(ufcb.builders))
	for i := range ufcb.builders {
		func(i int, root context.Context) {
			builder := ufcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserFollowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ufcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ufcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ufcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ufcb *UserFollowCreateBulk) SaveX(ctx context.Context) []*UserFollow {
	v, err := ufcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufcb *UserFollowCreateBulk) Exec(ctx context.Context) error {
	_, err := ufcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufcb *UserFollowCreateBulk) ExecX(ctx context.Context) {
	if err := ufcb.Exec(ctx); err != nil {
		panic(err)
	}
}

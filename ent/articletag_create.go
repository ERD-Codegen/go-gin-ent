// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/k0kishima/golang-realworld-example-app/ent/articletag"
)

// ArticleTagCreate is the builder for creating a ArticleTag entity.
type ArticleTagCreate struct {
	config
	mutation *ArticleTagMutation
	hooks    []Hook
}

// SetArticleID sets the "article_id" field.
func (atc *ArticleTagCreate) SetArticleID(u uuid.UUID) *ArticleTagCreate {
	atc.mutation.SetArticleID(u)
	return atc
}

// SetTagID sets the "tag_id" field.
func (atc *ArticleTagCreate) SetTagID(u uuid.UUID) *ArticleTagCreate {
	atc.mutation.SetTagID(u)
	return atc
}

// SetCreatedAt sets the "created_at" field.
func (atc *ArticleTagCreate) SetCreatedAt(t time.Time) *ArticleTagCreate {
	atc.mutation.SetCreatedAt(t)
	return atc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atc *ArticleTagCreate) SetNillableCreatedAt(t *time.Time) *ArticleTagCreate {
	if t != nil {
		atc.SetCreatedAt(*t)
	}
	return atc
}

// SetID sets the "id" field.
func (atc *ArticleTagCreate) SetID(u uuid.UUID) *ArticleTagCreate {
	atc.mutation.SetID(u)
	return atc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (atc *ArticleTagCreate) SetNillableID(u *uuid.UUID) *ArticleTagCreate {
	if u != nil {
		atc.SetID(*u)
	}
	return atc
}

// Mutation returns the ArticleTagMutation object of the builder.
func (atc *ArticleTagCreate) Mutation() *ArticleTagMutation {
	return atc.mutation
}

// Save creates the ArticleTag in the database.
func (atc *ArticleTagCreate) Save(ctx context.Context) (*ArticleTag, error) {
	atc.defaults()
	return withHooks(ctx, atc.sqlSave, atc.mutation, atc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (atc *ArticleTagCreate) SaveX(ctx context.Context) *ArticleTag {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atc *ArticleTagCreate) Exec(ctx context.Context) error {
	_, err := atc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atc *ArticleTagCreate) ExecX(ctx context.Context) {
	if err := atc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atc *ArticleTagCreate) defaults() {
	if _, ok := atc.mutation.CreatedAt(); !ok {
		v := articletag.DefaultCreatedAt()
		atc.mutation.SetCreatedAt(v)
	}
	if _, ok := atc.mutation.ID(); !ok {
		v := articletag.DefaultID()
		atc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atc *ArticleTagCreate) check() error {
	if _, ok := atc.mutation.ArticleID(); !ok {
		return &ValidationError{Name: "article_id", err: errors.New(`ent: missing required field "ArticleTag.article_id"`)}
	}
	if _, ok := atc.mutation.TagID(); !ok {
		return &ValidationError{Name: "tag_id", err: errors.New(`ent: missing required field "ArticleTag.tag_id"`)}
	}
	if _, ok := atc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ArticleTag.created_at"`)}
	}
	return nil
}

func (atc *ArticleTagCreate) sqlSave(ctx context.Context) (*ArticleTag, error) {
	if err := atc.check(); err != nil {
		return nil, err
	}
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	atc.mutation.id = &_node.ID
	atc.mutation.done = true
	return _node, nil
}

func (atc *ArticleTagCreate) createSpec() (*ArticleTag, *sqlgraph.CreateSpec) {
	var (
		_node = &ArticleTag{config: atc.config}
		_spec = sqlgraph.NewCreateSpec(articletag.Table, sqlgraph.NewFieldSpec(articletag.FieldID, field.TypeUUID))
	)
	if id, ok := atc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := atc.mutation.ArticleID(); ok {
		_spec.SetField(articletag.FieldArticleID, field.TypeUUID, value)
		_node.ArticleID = value
	}
	if value, ok := atc.mutation.TagID(); ok {
		_spec.SetField(articletag.FieldTagID, field.TypeUUID, value)
		_node.TagID = value
	}
	if value, ok := atc.mutation.CreatedAt(); ok {
		_spec.SetField(articletag.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// ArticleTagCreateBulk is the builder for creating many ArticleTag entities in bulk.
type ArticleTagCreateBulk struct {
	config
	err      error
	builders []*ArticleTagCreate
}

// Save creates the ArticleTag entities in the database.
func (atcb *ArticleTagCreateBulk) Save(ctx context.Context) ([]*ArticleTag, error) {
	if atcb.err != nil {
		return nil, atcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*ArticleTag, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArticleTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *ArticleTagCreateBulk) SaveX(ctx context.Context) []*ArticleTag {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atcb *ArticleTagCreateBulk) Exec(ctx context.Context) error {
	_, err := atcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atcb *ArticleTagCreateBulk) ExecX(ctx context.Context) {
	if err := atcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/k0kishima/golang-realworld-example-app/ent/predicate"
	"github.com/k0kishima/golang-realworld-example-app/ent/userfollow"
)

// UserFollowUpdate is the builder for updating UserFollow entities.
type UserFollowUpdate struct {
	config
	hooks    []Hook
	mutation *UserFollowMutation
}

// Where appends a list predicates to the UserFollowUpdate builder.
func (ufu *UserFollowUpdate) Where(ps ...predicate.UserFollow) *UserFollowUpdate {
	ufu.mutation.Where(ps...)
	return ufu
}

// SetFollowerID sets the "follower_id" field.
func (ufu *UserFollowUpdate) SetFollowerID(u uuid.UUID) *UserFollowUpdate {
	ufu.mutation.SetFollowerID(u)
	return ufu
}

// SetNillableFollowerID sets the "follower_id" field if the given value is not nil.
func (ufu *UserFollowUpdate) SetNillableFollowerID(u *uuid.UUID) *UserFollowUpdate {
	if u != nil {
		ufu.SetFollowerID(*u)
	}
	return ufu
}

// SetFolloweeID sets the "followee_id" field.
func (ufu *UserFollowUpdate) SetFolloweeID(u uuid.UUID) *UserFollowUpdate {
	ufu.mutation.SetFolloweeID(u)
	return ufu
}

// SetNillableFolloweeID sets the "followee_id" field if the given value is not nil.
func (ufu *UserFollowUpdate) SetNillableFolloweeID(u *uuid.UUID) *UserFollowUpdate {
	if u != nil {
		ufu.SetFolloweeID(*u)
	}
	return ufu
}

// SetCreatedAt sets the "created_at" field.
func (ufu *UserFollowUpdate) SetCreatedAt(t time.Time) *UserFollowUpdate {
	ufu.mutation.SetCreatedAt(t)
	return ufu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ufu *UserFollowUpdate) SetNillableCreatedAt(t *time.Time) *UserFollowUpdate {
	if t != nil {
		ufu.SetCreatedAt(*t)
	}
	return ufu
}

// Mutation returns the UserFollowMutation object of the builder.
func (ufu *UserFollowUpdate) Mutation() *UserFollowMutation {
	return ufu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufu *UserFollowUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ufu.sqlSave, ufu.mutation, ufu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufu *UserFollowUpdate) SaveX(ctx context.Context) int {
	affected, err := ufu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufu *UserFollowUpdate) Exec(ctx context.Context) error {
	_, err := ufu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufu *UserFollowUpdate) ExecX(ctx context.Context) {
	if err := ufu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufu *UserFollowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userfollow.Table, userfollow.Columns, sqlgraph.NewFieldSpec(userfollow.FieldID, field.TypeUUID))
	if ps := ufu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufu.mutation.FollowerID(); ok {
		_spec.SetField(userfollow.FieldFollowerID, field.TypeUUID, value)
	}
	if value, ok := ufu.mutation.FolloweeID(); ok {
		_spec.SetField(userfollow.FieldFolloweeID, field.TypeUUID, value)
	}
	if value, ok := ufu.mutation.CreatedAt(); ok {
		_spec.SetField(userfollow.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfollow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufu.mutation.done = true
	return n, nil
}

// UserFollowUpdateOne is the builder for updating a single UserFollow entity.
type UserFollowUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserFollowMutation
}

// SetFollowerID sets the "follower_id" field.
func (ufuo *UserFollowUpdateOne) SetFollowerID(u uuid.UUID) *UserFollowUpdateOne {
	ufuo.mutation.SetFollowerID(u)
	return ufuo
}

// SetNillableFollowerID sets the "follower_id" field if the given value is not nil.
func (ufuo *UserFollowUpdateOne) SetNillableFollowerID(u *uuid.UUID) *UserFollowUpdateOne {
	if u != nil {
		ufuo.SetFollowerID(*u)
	}
	return ufuo
}

// SetFolloweeID sets the "followee_id" field.
func (ufuo *UserFollowUpdateOne) SetFolloweeID(u uuid.UUID) *UserFollowUpdateOne {
	ufuo.mutation.SetFolloweeID(u)
	return ufuo
}

// SetNillableFolloweeID sets the "followee_id" field if the given value is not nil.
func (ufuo *UserFollowUpdateOne) SetNillableFolloweeID(u *uuid.UUID) *UserFollowUpdateOne {
	if u != nil {
		ufuo.SetFolloweeID(*u)
	}
	return ufuo
}

// SetCreatedAt sets the "created_at" field.
func (ufuo *UserFollowUpdateOne) SetCreatedAt(t time.Time) *UserFollowUpdateOne {
	ufuo.mutation.SetCreatedAt(t)
	return ufuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ufuo *UserFollowUpdateOne) SetNillableCreatedAt(t *time.Time) *UserFollowUpdateOne {
	if t != nil {
		ufuo.SetCreatedAt(*t)
	}
	return ufuo
}

// Mutation returns the UserFollowMutation object of the builder.
func (ufuo *UserFollowUpdateOne) Mutation() *UserFollowMutation {
	return ufuo.mutation
}

// Where appends a list predicates to the UserFollowUpdate builder.
func (ufuo *UserFollowUpdateOne) Where(ps ...predicate.UserFollow) *UserFollowUpdateOne {
	ufuo.mutation.Where(ps...)
	return ufuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufuo *UserFollowUpdateOne) Select(field string, fields ...string) *UserFollowUpdateOne {
	ufuo.fields = append([]string{field}, fields...)
	return ufuo
}

// Save executes the query and returns the updated UserFollow entity.
func (ufuo *UserFollowUpdateOne) Save(ctx context.Context) (*UserFollow, error) {
	return withHooks(ctx, ufuo.sqlSave, ufuo.mutation, ufuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufuo *UserFollowUpdateOne) SaveX(ctx context.Context) *UserFollow {
	node, err := ufuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufuo *UserFollowUpdateOne) Exec(ctx context.Context) error {
	_, err := ufuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufuo *UserFollowUpdateOne) ExecX(ctx context.Context) {
	if err := ufuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufuo *UserFollowUpdateOne) sqlSave(ctx context.Context) (_node *UserFollow, err error) {
	_spec := sqlgraph.NewUpdateSpec(userfollow.Table, userfollow.Columns, sqlgraph.NewFieldSpec(userfollow.FieldID, field.TypeUUID))
	id, ok := ufuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserFollow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userfollow.FieldID)
		for _, f := range fields {
			if !userfollow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userfollow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufuo.mutation.FollowerID(); ok {
		_spec.SetField(userfollow.FieldFollowerID, field.TypeUUID, value)
	}
	if value, ok := ufuo.mutation.FolloweeID(); ok {
		_spec.SetField(userfollow.FieldFolloweeID, field.TypeUUID, value)
	}
	if value, ok := ufuo.mutation.CreatedAt(); ok {
		_spec.SetField(userfollow.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &UserFollow{config: ufuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfollow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufuo.mutation.done = true
	return _node, nil
}
